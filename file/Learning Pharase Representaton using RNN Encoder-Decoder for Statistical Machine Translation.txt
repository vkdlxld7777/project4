Learning Phrase Representations using RNN EncoderŒDecoder
for Statistical Machine Translation
Kyunghyun Cho
Bart van Merri
¨
enboer Caglar Gulcehre
Universit
´
e de Montr
´
eal
firstname.lastname@umontreal.ca
Dzmitry Bahdanau
Jacobs University, Germany
d.bahdanau@jacobs-university.de
Fethi Bougares Holger Schwenk
Universit
´
e du Maine, France
firstname.lastname@lium.univ-lemans.fr
Yoshua Bengio
Universit
´
e de Montr
´
eal, CIFAR Senior Fellow
find.me@on.the.web
Abstract
In this paper, we propose a novel neu-
ral network model called RNN EncoderŒ
Decoder that consists of two recurrent
neural networks (RNN). One RNN en-
codes a sequence of symbols into a xed-
length vector representation, and the other
decodes the representation into another se-
quence of symbols. The encoder and de-
coder of the proposed model are jointly
trained to maximize the conditional prob-
ability of a target sequence given a source
sequence. The performance of a statisti-
cal machine translation system is empiri-
cally found to improve by using the con-
ditional probabilities of phrase pairs com-
puted by the RNN EncoderŒDecoder as an
additional feature in the existing log-linear
model. Qualitatively, we show that the
proposed model learns a semantically and
syntactically meaningful representation of
linguistic phrases.
1 Introduction
Deep neural networks have shown great success in
various applications such as objection recognition
(see, e.g., (Krizhevsky et al., 2012)) and speech
recognition (see, e.g., (Dahl et al., 2012)). Fur-
thermore, many recent works showed that neu-
ral networks can be successfully used in a num-
ber of tasks in natural language processing (NLP).
These include, but are not limited to, language
modeling (Bengio et al., 2003), paraphrase detec-
tion (Socher et al., 2011) and word embedding ex-
traction (Mikolov et al., 2013). In the eld of sta-
tistical machine translation (SMT), deep neural
networks have begun to show promising results.
(Schwenk, 2012) summarizes a successful usage
of feedforward neural networks in the framework
of phrase-based SMT system.
Along this line of research on using neural net-
works for SMT, this paper focuses on a novel neu-
ral network architecture that can be used as a part
of the conventional phrase-based SMT system.
The proposed neural network architecture, which
we will refer to as an
RNN EncoderŒDecoder
, con-
sists of two recurrent neural networks (RNN) that
act as an encoder and a decoder pair. The en-
coder maps a variable-length source sequence to a
xed-length vector, and the decoder maps the vec-
tor representation back to a variable-length target
sequence. The two networks are trained jointly to
maximize the conditional probability of the target
sequence given a source sequence. Additionally,
we propose to use a rather sophisticated hidden
unit in order to improve both the memory capacity
and the ease of training.
The proposed RNN EncoderŒDecoder with a
novel hidden unit is empirically evaluated on the
task of translating from English to French. We
train the model to learn the translation probabil-
ity of an English phrase to a corresponding French
phrase. The model is then used as a part of a stan-
dard phrase-based SMT system by scoring each
phrase pair in the phrase table. The empirical eval-
uation reveals that this approach of scoring phrase
pairs with an RNN EncoderŒDecoder improves
the translation performance.
We qualitatively analyze the trained RNN
EncoderŒDecoder by comparing its phrase scores
with those given by the existing translation model.
The qualitative analysis shows that the RNN
EncoderŒDecoder is better at capturing the lin-
guistic regularities in the phrase table, indirectly
explaining the quantitative improvements in the
overall translation performance. The further anal-
ysis of the model reveals that the RNN EncoderŒ
Decoder learns a continuous space representation
of a phrase that preserves both the semantic and
syntactic structure of the phrase.
arXiv:1406.1078v3  [cs.CL]  3 Sep 2014
2 RNN EncoderŒDecoder
2.1 Preliminary: Recurrent Neural Networks
A recurrent neural network (RNN) is a neural net-
work that consists of a hidden state
h
and an
optional output
y
which operates on a variable-
length sequence
x
= (
x
1
; : : : ; x
T
)
. At each time
step
t
, the hidden state
h
h
t
i
of the RNN is updated
by
h
h
t
i
=
f

h
h
t

1
i
; x
t

;
(1)
where
f
is a non-linear activation func-
tion.
f
may be as simple as an element-
wise logistic sigmoid function and as com-
plex as a long short-term memory (LSTM)
unit (Hochreiter and Schmidhuber, 1997).
An RNN can learn a probability distribution
over a sequence by being trained to predict the
next symbol in a sequence. In that case, the output
at each timestep
t
is the conditional distribution
p
(
x
t
j
x
t

1
; : : : ; x
1
)
. For example, a multinomial
distribution (
1
-of-
K
coding) can be output using a
softmax activation function
p
(
x
t;j
= 1
j
x
t

1
; : : : ; x
1
) =
exp

w
j
h
h
t
i

P
K
j
0
=1
exp

w
j
0
h
h
t
i

;
(2)
for all possible symbols
j
= 1
; : : : ; K
, where
w
j
are the rows of a weight matrix
W
. By combining
these probabilities, we can compute the probabil-
ity of the sequence
x
using
p
(
x
) =
T
Y
t
=1
p
(
x
t
j
x
t

1
; : : : ; x
1
)
:
(3)
From this learned distribution, it is straightfor-
ward to sample a new sequence by iteratively sam-
pling a symbol at each time step.
2.2 RNN EncoderŒDecoder
In this paper, we propose a novel neural network
architecture that learns to
encode
a variable-length
sequence into a xed-length vector representation
and to
decode
a given xed-length vector rep-
resentation back into a variable-length sequence.
From a probabilistic perspective, this new model
is a general method to learn the conditional dis-
tribution over a variable-length sequence condi-
tioned on yet another variable-length sequence,
e.g.
p
(
y
1
; : : : ; y
T
0
j
x
1
; : : : ; x
T
)
, where one
Figure 1: An illustration of the proposed RNN
EncoderŒDecoder.
should note that the input and output sequence
lengths
T
and
T
0
may differ.
The encoder is an RNN that reads each symbol
of an input sequence
x
sequentially. As it reads
each symbol, the hidden state of the RNN changes
according to Eq. (1). After reading the end of
the sequence (marked by an end-of-sequence sym-
bol), the hidden state of the RNN is a summary
c
of the whole input sequence.
The decoder of the proposed model is another
RNN which is trained to
generate
the output se-
quence by predicting the next symbol
y
t
given the
hidden state
h
h
t
i
. However, unlike the RNN de-
scribed in Sec. 2.1, both
y
t
and
h
h
t
i
are also con-
ditioned on
y
t

1
and on the summary
c
of the input
sequence. Hence, the hidden state of the decoder
at time
t
is computed by,
h
h
t
i
=
f

h
h
t

1
i
; y
t

1
;
c

;
and similarly, the conditional distribution of the
next symbol is
P
(
y
t
j
y
t

1
; y
t

2
; : : : ; y
1
;
c
) =
g

h
h
t
i
; y
t

1
;
c

:
for given activation functions
f
and
g
(the latter
must produce valid probabilities, e.g. with a soft-
max).
See Fig. 1 for a graphical depiction of the pro-
posed model architecture.
The two components of the proposed
RNN
EncoderŒDecoder
are jointly trained to maximize
the conditional log-likelihood
max

1
N
N
X
n
=1
log
p

(
y
n
j
x
n
)
;
(4)
where

is the set of the model parameters and
each
(
x
n
;
y
n
)
is an (input sequence, output se-
quence) pair from the training set. In our case,
as the output of the decoder, starting from the in-
put, is differentiable, we can use a gradient-based
algorithm to estimate the model parameters.
Once the RNN EncoderŒDecoder is trained, the
model can be used in two ways. One way is to use
the model to generate a target sequence given an
input sequence. On the other hand, the model can
be used to
score
a given pair of input and output
sequences, where the score is simply a probability
p

(
y
j
x
)
from Eqs. (3) and (4).
2.3 Hidden Unit that Adaptively Remembers
and Forgets
In addition to a novel model architecture, we also
propose a new type of hidden unit (
f
in Eq. (1))
that has been motivated by the LSTM unit but is
much simpler to compute and implement.
1
Fig. 2
shows the graphical depiction of the proposed hid-
den unit.
Let us describe how the activation of the
j
-th
hidden unit is computed. First, the
reset
gate
r
j
is
computed by
r
j
=
˙

[
W
r
x
]
j
+

U
r
h
h
t

1
i

j

;
(5)
where
˙
is the logistic sigmoid function, and
[
:
]
j
denotes the
j
-th element of a vector.
x
and
h
t

1
are the input and the previous hidden state, respec-
tively.
W
r
and
U
r
are weight matrices which are
learned.
Similarly, the
update
gate
z
j
is computed by
z
j
=
˙

[
W
z
x
]
j
+

U
z
h
h
t

1
i

j

:
(6)
The actual activation of the proposed unit
h
j
is
then computed by
h
h
t
i
j
=
z
j
h
h
t

1
i
j
+ (1

z
j
)
~
h
h
t
i
j
;
(7)
where
~
h
h
t
i
j
=
˚

[
Wx
]
j
+

U

r

h
h
t

1
i

j

:
(8)
In this formulation, when the reset gate is close
to 0, the hidden state is forced to ignore the pre-
vious hidden state and reset with the current input
1
The LSTM unit, which has shown impressive results in
several applications such as speech recognition, has a mem-
ory cell and four gating units that adaptively control the in-
formation ow inside the unit, compared to only two gating
units in the proposed hidden unit. For details on LSTM net-
works, see, e.g., (Graves, 2012).
Figure 2: An illustration of the proposed hidden
activation function. The update gate
z
selects
whether the hidden state is to be updated with
a new hidden state
~
h
. The reset gate
r
decides
whether the previous hidden state is ignored. See
Eqs. (5)Œ(8) for the detailed equations of
r
,
z
,
h
and
~
h
.
only. This effectively allows the hidden state to
drop
any information that is found to be irrelevant
later in the future, thus, allowing a more compact
representation.
On the other hand, the update gate controls how
much information from the previous hidden state
will carry over to the current hidden state. This
acts similarly to the memory cell in the LSTM
network and helps the RNN to remember long-
term information. Furthermore, this may be con-
sidered an adaptive variant of a leaky-integration
unit (Bengio et al., 2013).
As each hidden unit has separate reset and up-
date gates, each hidden unit will learn to capture
dependencies over different time scales. Those
units that learn to capture short-term dependencies
will tend to have reset gates that are frequently ac-
tive, but those that capture longer-term dependen-
cies will have update gates that are mostly active.
In our preliminary experiments, we found that
it is crucial to use this new unit with gating units.
We were not able to get meaningful result with an
oft-used
tanh
unit without any gating.
3 Statistical Machine Translation
In a commonly used statistical machine translation
system (SMT), the goal of the system (decoder,
specically) is to nd a translation
f
given a source
sentence
e
, which maximizes
p
(
f
j
e
)
/
p
(
e
j
f
)
p
(
f
)
;
where the rst term at the right hand side is called
translation model
and the latter
language model
(see, e.g., (Koehn, 2005)). In practice, however,
most SMT systems model
log
p
(
f
j
e
)
as a log-
linear model with additional features and corre-
sponding weights:
log
p
(
f
j
e
) =
N
X
n
=1
w
n
f
n
(
f
;
e
) + log
Z
(
e
)
;
(9)
where
f
n
and
w
n
are the
n
-th feature and weight,
respectively.
Z
(
e
)
is a normalization constant that
does not depend on the weights. The weights are
often optimized to maximize the BLEU score on a
development set.
In the phrase-based SMT framework
introduced in (Koehn et al., 2003) and
(Marcu and Wong, 2002), the translation model
log
p
(
e
j
f
)
is factorized into the translation
probabilities of matching phrases in the source
and target sentences.
2
These probabilities are
once again considered additional features in the
log-linear model (see Eq. (9)) and are weighted
accordingly to maximize the BLEU score.
Since the neural net language model was pro-
posed in (Bengio et al., 2003), neural networks
have been used widely in SMT systems. In
many cases, neural networks have been used to
rescore
translation hypotheses (
n
-best lists) (see,
e.g., (Schwenk et al., 2006)). Recently, however,
there has been interest in training neural networks
to score the translated sentence (or phrase pairs)
using a representation of the source sentence as
an additional input. See, e.g., (Schwenk, 2012),
(Son et al., 2012) and (Zou et al., 2013).
3.1 Scoring Phrase Pairs with RNN
EncoderŒDecoder
Here we propose to train the RNN EncoderŒ
Decoder (see Sec. 2.2) on a table of phrase pairs
and use its scores as additional features in the log-
linear model in Eq. (9) when tuning the SMT de-
coder.
When we train the RNN EncoderŒDecoder, we
ignore the (normalized) frequencies of each phrase
pair in the original corpora. This measure was
taken in order (1) to reduce the computational ex-
pense of randomly selecting phrase pairs from a
large phrase table according to the normalized fre-
quencies and (2) to ensure that the RNN EncoderŒ
Decoder does not simply learn to rank the phrase
pairs according to their numbers of occurrences.
One underlying reason for this choice was that the
existing translation probability in the phrase ta-
ble already reects the frequencies of the phrase
2
Without loss of generality, from here on, we refer to
p
(
e
j
f
)
for each phrase pair as a translation model as well
pairs in the original corpus. With a xed capacity
of the RNN EncoderŒDecoder, we try to ensure
that most of the capacity of the model is focused
toward learning linguistic regularities, i.e., distin-
guishing between plausible and implausible trans-
lations, or learning the ﬁmanifoldﬂ (region of prob-
ability concentration) of plausible translations.
Once the RNN EncoderŒDecoder is trained, we
add a new score for each phrase pair to the exist-
ing phrase table. This allows the new scores to en-
ter into the existing tuning algorithm with minimal
additional overhead in computation.
As Schwenk pointed out in (Schwenk, 2012),
it is possible to completely replace the existing
phrase table with the proposed RNN EncoderŒ
Decoder. In that case, for a given source phrase,
the RNN EncoderŒDecoder will need to generate
a list of (good) target phrases. This requires, how-
ever, an expensive sampling procedure to be per-
formed repeatedly. In this paper, thus, we only
consider rescoring the phrase pairs in the phrase
table.
3.2 Related Approaches: Neural Networks in
Machine Translation
Before presenting the empirical results, we discuss
a number of recent works that have proposed to
use neural networks in the context of SMT.
Schwenk in (Schwenk, 2012) proposed a simi-
lar approach of scoring phrase pairs. Instead of the
RNN-based neural network, he used a feedforward
neural network that has xed-size inputs (7 words
in his case, with zero-padding for shorter phrases)
and xed-size outputs (7 words in the target lan-
guage). When it is used specically for scoring
phrases for the SMT system, the maximum phrase
length is often chosen to be small. However, as the
length of phrases increases or as we apply neural
networks to other variable-length sequence data,
it is important that the neural network can han-
dle variable-length input and output. The pro-
posed RNN EncoderŒDecoder is well-suited for
these applications.
Similar to (Schwenk, 2012), Devlin et al.
(Devlin et al., 2014) proposed to use a feedfor-
ward neural network to model a translation model,
however, by predicting one word in a target phrase
at a time. They reported an impressive improve-
ment, but their approach still requires the maxi-
mum length of the input phrase (or context words)
to be xed a priori.
Although it is not exactly a neural network they
train, the authors of (Zou et al., 2013) proposed
to learn a bilingual embedding of words/phrases.
They use the learned embedding to compute the
distance between a pair of phrases which is used
as an additional score of the phrase pair in an SMT
system.
In (Chandar et al., 2014), a feedforward neural
network was trained to learn a mapping from a
bag-of-words representation of an input phrase to
an output phrase. This is closely related to both the
proposed RNN EncoderŒDecoder and the model
proposed in (Schwenk, 2012), except that their in-
put representation of a phrase is a bag-of-words.
A similar approach of using bag-of-words repre-
sentations was proposed in (Gao et al., 2013) as
well. Earlier, a similar encoderŒdecoder model us-
ing two recursive neural networks was proposed
in (Socher et al., 2011), but their model was re-
stricted to a monolingual setting, i.e. the model
reconstructs an input sentence. More recently, an-
other encoderŒdecoder model using an RNN was
proposed in (Auli et al., 2013), where the de-
coder is conditioned on a representation of either
a source sentence or a source context.
One important difference between the pro-
posed RNN EncoderŒDecoder and the approaches
in (Zou et al., 2013) and (Chandar et al., 2014) is
that the order of the words in source and tar-
get phrases is taken into account. The RNN
EncoderŒDecoder naturally distinguishes between
sequences that have the same words but in a differ-
ent order, whereas the aforementioned approaches
effectively ignore order information.
The closest approach related to the proposed
RNN EncoderŒDecoder is the Recurrent Contin-
uous Translation Model (Model 2) proposed in
(Kalchbrenner and Blunsom, 2013). In their pa-
per, they proposed a similar model that consists
of an encoder and decoder. The difference with
our model is that they used a convolutional
n
-gram
model (CGM) for the encoder and the hybrid of
an inverse CGM and a recurrent neural network
for the decoder. They, however, evaluated their
model on rescoring the
n
-best list proposed by the
conventional SMT system and computing the per-
plexity of the gold standard translations.
4 Experiments
We evaluate our approach on the English/French
translation task of the WMT'14 workshop.
4.1 Data and Baseline System
Large amounts of resources are available to build
an English/French SMT system in the framework
of the WMT'14 translation task. The bilingual
corpora include Europarl (61M words), news com-
mentary (5.5M), UN (421M), and two crawled
corpora of 90M and 780M words respectively.
The last two corpora are quite noisy. To train
the French language model, about 712M words of
crawled newspaper material is available in addi-
tion to the target side of the bitexts. All the word
counts refer to French words after tokenization.
It is commonly acknowledged that training sta-
tistical models on the concatenation of all this
data does not necessarily lead to optimal per-
formance, and results in extremely large mod-
els which are difcult to handle. Instead, one
should focus on the most relevant subset of the
data for a given task. We have done so by
applying the data selection method proposed in
(Moore and Lewis, 2010), and its extension to bi-
texts (Axelrod et al., 2011). By these means we
selected a subset of 418M words out of more
than 2G words for language modeling and a
subset of 348M out of 850M words for train-
ing the RNN EncoderŒDecoder. We used the
test set
newstest2012 and 2013
for data
selection and weight tuning with MERT, and
newstest2014
as our test set. Each set has
more than 70 thousand words and a single refer-
ence translation.
For training the neural networks, including the
proposed RNN EncoderŒDecoder, we limited the
source and target vocabulary to the most frequent
15,000 words for both English and French. This
covers approximately 93% of the dataset. All the
out-of-vocabulary words were mapped to a special
token (
[
UNK
]
).
The baseline phrase-based SMT system was
built using Moses with default settings. This sys-
tem achieves a BLEU score of 30.64 and 33.3 on
the development and test sets, respectively (see Ta-
ble 1).
4.1.1 RNN EncoderŒDecoder
The RNN EncoderŒDecoder used in the experi-
ment had 1000 hidden units with the proposed
gates at the encoder and at the decoder. The in-
put matrix between each input symbol
x
h
t
i
and the
hidden unit is approximated with two lower-rank
matrices, and the output matrix is approximated
Models
BLEU
dev
test
Baseline
30.64
33.30
RNN
31.20
33.87
CSLM + RNN
31.48
34.64
CSLM + RNN + WP
31.50
34.54
Table 1: BLEU scores computed on the develop-
ment and test sets using different combinations of
approaches. WP denotes a
word penalty
, where
we penalizes the number of unknown words to
neural networks.
similarly. We used rank-100 matrices, equivalent
to learning an embedding of dimension 100 for
each word. The activation function used for
~
h
in
Eq. (8) is a hyperbolic tangent function. The com-
putation from the hidden state in the decoder to
the output is implemented as a deep neural net-
work (Pascanu et al., 2014) with a single interme-
diate layer having 500 maxout units each pooling
2 inputs (Goodfellow et al., 2013).
All the weight parameters in the RNN EncoderŒ
Decoder were initialized by sampling from an
isotropic zero-mean (white) Gaussian distribution
with its standard deviation xed to
0
:
01
, except
for the recurrent weight parameters. For the re-
current weight matrices, we rst sampled from a
white Gaussian distribution and used its left singu-
lar vectors matrix, following (Saxe et al., 2014).
We used Adadelta and stochastic gradient
descent to train the RNN EncoderŒDecoder
with hyperparameters

= 10

6
and
ˆ
=
0
:
95
(Zeiler, 2012). At each update, we used 64
randomly selected phrase pairs from a phrase ta-
ble (which was created from 348M words). The
model was trained for approximately three days.
Details of the architecture used in the experi-
ments are explained in more depth in the supple-
mentary material.
4.1.2 Neural Language Model
In order to assess the effectiveness of scoring
phrase pairs with the proposed RNN EncoderŒ
Decoder, we also tried a more traditional approach
of using a neural network for learning a target
language model (CSLM) (Schwenk, 2007). Espe-
cially, the comparison between the SMT system
using CSLM and that using the proposed approach
of phrase scoring by RNN EncoderŒDecoder will
clarify whether the contributions from multiple
neural networks in different parts of the SMT sys-
tem add up or are redundant.
We trained the CSLM model on 7-grams
from the target corpus. Each input word
was projected into the embedding space
R
512
,
and they were concatenated to form a 3072-
dimensional vector. The concatenated vector was
fed through two rectied layers (of size 1536 and
1024) (Glorot et al., 2011). The output layer was
a simple softmax layer (see Eq. (2)). All the
weight parameters were initialized uniformly be-
tween

0
:
01
and
0
:
01
, and the model was trained
until the validation perplexity did not improve for
10 epochs. After training, the language model
achieved a perplexity of 45.80. The validation set
was a random selection of 0.1% of the corpus. The
model was used to score partial translations dur-
ing the decoding process, which generally leads to
higher gains in BLEU score than n-best list rescor-
ing (Vaswani et al., 2013).
To address the computational complexity of
using a CSLM in the decoder a buffer was
used to aggregate n-grams during the stack-
search performed by the decoder. Only when
the buffer is full, or a stack is about to
be pruned, the n-grams are scored by the
CSLM. This allows us to perform fast matrix-
matrix multiplication on GPU using Theano
(Bergstra et al., 2010; Bastien et al., 2012).
Figure 3: The visualization of phrase pairs accord-
ing to their scores (log-probabilities) by the RNN
EncoderŒDecoder and the translation model.
4.2 Quantitative Analysis
We tried the following combinations:
1.
 Baseline conguration
2.
 Baseline + RNN
3.
 Baseline + CSLM + RNN
4.
 Baseline + CSLM + RNN + Word penalty
Source
Translation Model
RNN EncoderŒDecoder
at the end of the
[a la n de la] [
´
r la n des ann
´
ees] [
‹
etre sup-
prim
´
es
˚
a la n de la]
[
˚
a la n du] [
˚
a la n des] [
˚
a la n de la]
for the rst time
[
r
c

pour la premi
r
¨
ere fois] [
´
et
´
e donn
´
es pour
la premi
˚
ere fois] [
´
et
´
e comm
´
emor
´
ee pour la
premi
˚
ere fois]
[pour la premi
˚
ere fois] [pour la premi
˚
ere fois ,]
[pour la premi
˚
ere fois que]
in the United States
and
[
?
aux
?
tats-Unis et] [
´
et
´
e ouvertes aux
´
Etats-
Unis et] [
´
et
´
e constat
´
ees aux
´
Etats-Unis et]
[aux Etats-Unis et] [des Etats-Unis et] [des
´
Etats-Unis et]
, as well as
[
?
s , qu'] [
?
s , ainsi que] [
?
re aussi bien que]
[, ainsi qu'] [, ainsi que] [, ainsi que les]
one of the most
[
?
t
?
l' un des plus] [
?
l' un des plus] [
‹
etre retenue
comme un de ses plus]
[l' un des] [le] [un des]
(a) Long, frequent source phrases
Source
Translation Model
RNN EncoderŒDecoder
, Minister of Commu-
nications and Trans-
port
[Secr
´
etaire aux communications et aux trans-
ports :] [Secr
´
etaire aux communications et aux
transports]
[Secr
´
etaire aux communications et aux trans-
ports] [Secr
´
etaire aux communications et aux
transports :]
did not comply with
the
[vestimentaire , ne correspondaient pas
˚
a des]
[susmentionn
´
ee n'
´
etait pas conforme aux]
[pr
´
esent
´
ees n'
´
etaient pas conformes
˚
a la]
[n' ont pas respect
´
e les] [n'
´
etait pas conforme
aux] [n' ont pas respect
´
e la]
parts of the world .
[
c

gions du monde .] [r
´
egions du monde con-
sid
´
er
´
ees .] [r
´
egion du monde consid
´
er
´
ee .]
[parties du monde .] [les parties du monde .]
[des parties du monde .]
the past few days .
[le petit texte .] [cours des tout derniers jours .]
[les tout derniers jours .]
[ces derniers jours .] [les derniers jours .] [cours
des derniers jours .]
on Friday and Satur-
day
[vendredi et samedi
˚
a la] [vendredi et samedi
˚
a]
[se d
´
eroulera vendredi et samedi ,]
[le vendredi et le samedi] [le vendredi et samedi]
[vendredi et samedi]
(b) Long, rare source phrases
Table 2: The top scoring target phrases for a small set of source phrases according to the translation
model (direct translation probability) and by the RNN EncoderŒDecoder. Source phrases were randomly
selected from phrases with 4 or more words.
?
denotes an incomplete (partial) character.
r
is a Cyrillic
letter
ghe
.
The results are presented in Table 1. As ex-
pected, adding features computed by neural net-
works consistently improves the performance over
the baseline performance.
The best performance was achieved when we
used both CSLM and the phrase scores from the
RNN EncoderŒDecoder. This suggests that the
contributions of the CSLM and the RNN EncoderŒ
Decoder are not too correlated and that one can
expect better results by improving each method in-
dependently. Furthermore, we tried penalizing the
number of words that are unknown to the neural
networks (i.e. words which are not in the short-
list). We do so by simply adding the number of
unknown words as an additional feature the log-
linear model in Eq. (9).
3
However, in this case we
3
To understand the effect of the penalty, consider the set
of all words in the 15,000 large shortlist, SL. All words
x
i
=
2
SL are replaced by a special token
[
UNK
]
before being scored
by the neural networks. Hence, the conditional probability of
any
x
i
t
=
2
SL is actually given by the model as
p
(
x
t
= [
UNK
]
j
x
<t
) =
p
(
x
t
=
2
SL
j
x
<t
)
=
X
x
j
t
=
2
S L
p

x
j
t
j
x
<t


p

x
i
t
j
x
<t

;
where
x
<t
is a shorthand notation for
x
t

1
; : : : ; x
1
.
were not able to achieve better performance on the
test set, but only on the development set.
4.3 Qualitative Analysis
In order to understand where the performance im-
provement comes from, we analyze the phrase pair
scores computed by the RNN EncoderŒDecoder
against the corresponding
p
(
f
j
e
)
from the trans-
lation model. Since the existing translation model
relies solely on the statistics of the phrase pairs in
the corpus, we expect its scores to be better esti-
mated for the frequent phrases but badly estimated
for rare phrases. Also, as we mentioned earlier
in Sec. 3.1, we further expect the RNN EncoderŒ
Decoder which was trained without any frequency
information to score the phrase pairs based rather
on the linguistic regularities than on the statistics
of their occurrences in the corpus.
We focus on those pairs whose source phrase is
long
(more than 3 words per source phrase) and
As a result, the probability of words not in the shortlist is
always overestimated. It is possible to address this issue by
backing off to an existing model that contain non-shortlisted
words (see (Schwenk, 2007)) In this paper, however, we opt
for introducing a word penalty instead, which counteracts the
word probability overestimation.
Source
Samples from RNN EncoderŒDecoder
at the end of the
[
˚
a la n de la] (

11
)
for the rst time
[pour la premi
˚
ere fois] (

24
) [pour la premi
˚
ere fois que] (

2
)
in the United States and
[aux
´
Etats-Unis et] (

6
) [dans les
´
Etats-Unis et] (

4
)
, as well as
[, ainsi que] [,] [ainsi que] [, ainsi qu'] [et UNK]
one of the most
[l' un des plus] (

9
) [l' un des] (

5
) [l' une des plus] (

2
)
(a) Long, frequent source phrases
Source
Samples from RNN EncoderŒDecoder
, Minister of Communica-
tions and Transport
[ , ministre des communications et le transport] (

13
)
did not comply with the
[n' tait pas conforme aux] [n' a pas respect l'] (

2
) [n' a pas respect la] (

3
)
parts of the world .
[arts du monde .] (

11
) [des arts du monde .] (

7
)
the past few days .
[quelques jours .] (

5
) [les derniers jours .] (

5
) [ces derniers jours .] (

2
)
on Friday and Saturday
[vendredi et samedi] (

5
) [le vendredi et samedi] (

7
) [le vendredi et le samedi] (

4
)
(b) Long, rare source phrases
Table 3: Samples generated from the RNN EncoderŒDecoder for each source phrase used in Table 2. We
show the top-5 target phrases out of 50 samples. They are sorted by the RNN EncoderŒDecoder scores.
Figure 4: 2ŒD embedding of the learned word representation. The left one shows the full embedding
space, while the right one shows a zoomed-in view of one region (colorŒcoded). For more plots, see the
supplementary material.
frequent
. For each such source phrase, we look
at the target phrases that have been scored high
either by the translation probability
p
(
f
j
e
)
or
by the RNN EncoderŒDecoder. Similarly, we per-
form the same procedure with those pairs whose
source phrase is
long
but
rare
in the corpus.
Table 2 lists the top-
3
target phrases per source
phrase favored either by the translation model
or by the RNN EncoderŒDecoder. The source
phrases were randomly chosen among long ones
having more than 4 or 5 words.
In most cases, the choices of the target phrases
by the RNN EncoderŒDecoder are closer to ac-
tual or literal translations. We can observe that the
RNN EncoderŒDecoder prefers shorter phrases in
general.
Interestingly, many phrase pairs were scored
similarly by both the translation model and the
RNN EncoderŒDecoder, but there were as many
other phrase pairs that were scored radically dif-
ferent (see Fig. 3). This could arise from the
proposed approach of training the RNN EncoderŒ
Decoder on a set of unique phrase pairs, discour-
aging the RNN EncoderŒDecoder from learning
simply the frequencies of the phrase pairs from the
corpus, as explained earlier.
Furthermore, in Table 3, we show for each of
the source phrases in Table 2, the generated sam-
ples from the RNN EncoderŒDecoder. For each
source phrase, we generated 50 samples and show
the top-ve phrases accordingly to their scores.
We can see that the RNN EncoderŒDecoder is
able to propose well-formed target phrases with-
out looking at the actual phrase table. Importantly,
the generated phrases do not overlap completely
with the target phrases from the phrase table. This
encourages us to further investigate the possibility
of replacing the whole or a part of the phrase table
Figure 5: 2ŒD embedding of the learned phrase representation. The top left one shows the full represen-
tation space (5000 randomly selected points), while the other three gures show the zoomed-in view of
specic regions (colorŒcoded).
with the proposed RNN EncoderŒDecoder in the
future.
4.4 Word and Phrase Representations
Since the proposed RNN EncoderŒDecoder is not
specically designed only for the task of machine
translation, here we briey look at the properties
of the trained model.
It has been known for some time that
continuous space language models using
neural networks are able to learn seman-
tically meaningful embeddings (See, e.g.,
(Bengio et al., 2003; Mikolov et al., 2013)). Since
the proposed RNN EncoderŒDecoder also projects
to and maps back from a sequence of words into
a continuous space vector, we expect to see a
similar property with the proposed model as well.
The left plot in Fig. 4 shows the 2ŒD embedding
of the words using the word embedding matrix
learned by the RNN EncoderŒDecoder. The pro-
jection was done by the recently proposed Barnes-
Hut-SNE (van der Maaten, 2013). We can clearly
see that semantically similar words are clustered
with each other (see the zoomed-in plots in Fig. 4).
The proposed RNN EncoderŒDecoder naturally
generates a continuous-space representation of a
phrase. The representation (
c
in Fig. 1) in this
case is a 1000-dimensional vector. Similarly to the
word representations, we visualize the representa-
tions of the phrases that consists of four or more
words using the Barnes-Hut-SNE in Fig. 5.
From the visualization, it is clear that the RNN
EncoderŒDecoder captures
both semantic and syn-
tactic
structures of the phrases. For instance, in
the bottom-left plot, most of the phrases are about
the duration of time, while those phrases that are
syntactically similar are clustered together. The
bottom-right plot shows the cluster of phrases that
are semantically similar (countries or regions). On
the other hand, the top-right plot shows the phrases
that are syntactically similar.
5 Conclusion
In this paper, we proposed a new neural network
architecture, called an
RNN EncoderŒDecoder
that is able to learn the mapping from a sequence
of an arbitrary length to another sequence, possi-
bly from a different set, of an arbitrary length. The
proposed RNN EncoderŒDecoder is able to either
score a pair of sequences (in terms of a conditional
probability) or generate a target sequence given a
source sequence. Along with the new architecture,
we proposed a novel hidden unit that includes a re-
set gate and an update gate that adaptively control
how much each hidden unit remembers or forgets
while reading/generating a sequence.
We evaluated the proposed model with the task
of statistical machine translation, where we used
the RNN EncoderŒDecoder to score each phrase
pair in the phrase table. Qualitatively, we were
able to show that the new model is able to cap-
ture linguistic regularities in the phrase pairs well
and also that the RNN EncoderŒDecoder is able to
propose well-formed target phrases.
The scores by the RNN EncoderŒDecoder were
found to improve the overall translation perfor-
mance in terms of BLEU scores. Also, we
found that the contribution by the RNN EncoderŒ
Decoder is rather orthogonal to the existing ap-
proach of using neural networks in the SMT sys-
tem, so that we can improve further the perfor-
mance by using, for instance, the RNN EncoderŒ
Decoder and the neural net language model to-
gether.
Our qualitative analysis of the trained model
shows that it indeed captures the linguistic regu-
larities in multiple levels i.e. at the word level as
well as phrase level. This suggests that there may
be more natural language related applications that
may benet from the proposed RNN EncoderŒ
Decoder.
The proposed architecture has large potential
for further improvement and analysis. One ap-
proach that was not investigated here is to re-
place the whole, or a part of the phrase table by
letting the RNN EncoderŒDecoder propose target
phrases. Also, noting that the proposed model is
not limited to being used with written language,
it will be an important future research to apply the
proposed architecture to other applications such as
speech transcription.
Acknowledgments
KC, BM, CG, DB and YB would like to thank
NSERC, Calcul Qu
´
ebec, Compute Canada, the
Canada Research Chairs and CIFAR. FB and HS
were partially funded by the European Commis-
sion under the project MateCat, and by DARPA
under the BOLT project.
References
[Auli et al.2013]
 Michael Auli, Michel Galley, Chris
Quirk, and Geoffrey Zweig. 2013. Joint language
and translation modeling with recurrent neural net-
works. In
Proceedings of the ACL Conference on
Empirical Methods in Natural Language Processing
(EMNLP)
, pages 1044Œ1054.
[Axelrod et al.2011]
 Amittai Axelrod, Xiaodong He,
and Jianfeng Gao. 2011. Domain adaptation via
pseudo in-domain data selection. In
Proceedings of
the ACL Conference on Empirical Methods in Natu-
ral Language Processing (EMNLP)
, pages 355Œ362.
[Bastien et al.2012]
 Fr
´
ed
´
eric Bastien, Pascal Lamblin,
Razvan Pascanu, James Bergstra, Ian J. Goodfellow,
Arnaud Bergeron, Nicolas Bouchard, and Yoshua
Bengio. 2012. Theano: new features and speed im-
provements. Deep Learning and Unsupervised Fea-
ture Learning NIPS 2012 Workshop.
[Bengio et al.2003]
 Yoshua Bengio, R
´
ejean Ducharme,
Pascal Vincent, and Christian Janvin. 2003. A neu-
ral probabilistic language model.
J. Mach. Learn.
Res.
, 3:1137Œ1155, March.
[Bengio et al.2013]
 Y. Bengio, N. Boulanger-
Lewandowski, and R. Pascanu. 2013. Advances
in optimizing recurrent networks. In
Proceedings
of the 38th International Conference on Acoustics,
Speech, and Signal Processing (ICASSP 2013)
,
May.
[Bergstra et al.2010]
 James Bergstra, Olivier Breuleux,
Fr
´
ed
´
eric Bastien, Pascal Lamblin, Razvan Pascanu,
Guillaume Desjardins, Joseph Turian, David Warde-
Farley, and Yoshua Bengio. 2010. Theano: a CPU
and GPU math expression compiler. In
Proceedings
of the Python for Scientic Computing Conference
(SciPy)
, June. Oral Presentation.
[Chandar et al.2014]
 Sarath Chandar, Stanislas Lauly,
Hugo Larochelle, Mitesh Khapra, Balaraman Ravin-
dran, Vikas Raykar, and Amrita Saha. 2014. An au-
toencoder approach to learning bilingual word repre-
sentations.
arXiv:
1402.1454 [cs.CL]
, Febru-
ary.
[Dahl et al.2012]
 George E. Dahl, Dong Yu, Li Deng,
and Alex Acero. 2012. Context-dependent pre-
trained deep neural networks for large vocabulary
speech recognition.
IEEE Transactions on Audio,
Speech, and Language Processing
, 20(1):33Œ42.
[Devlin et al.2014]
 Jacob Devlin, Rabih Zbib,
Zhongqiang Huang, Thomas Lamar, Richard
Schwartz, , and John Makhoul. 2014. Fast and
robust neural network joint models for statistical
machine translation. In
Proceedings of the ACL
2014 Conference
, ACL '14, pages 1370Œ1380.
[Gao et al.2013]
 Jianfeng Gao, Xiaodong He, Wen tau
Yih, and Li Deng. 2013. Learning semantic repre-
sentations for the phrase translation model. Techni-
cal report, Microsoft Research.
[Glorot et al.2011]
 X. Glorot, A. Bordes, and Y. Ben-
gio. 2011. Deep sparse rectier neural networks. In
AISTATS'2011
.
[Goodfellow et al.2013]
 Ian J. Goodfellow, David
Warde-Farley, Mehdi Mirza, Aaron Courville, and
Yoshua Bengio. 2013. Maxout networks. In
ICML'2013
.
[Graves2012]
 Alex Graves. 2012.
Supervised Se-
quence Labelling with Recurrent Neural Networks
.
Studies in Computational Intelligence. Springer.
[Hochreiter and Schmidhuber1997]
 S. Hochreiter and
J. Schmidhuber. 1997. Long short-term memory.
Neural Computation
, 9(8):1735Œ1780.
[Kalchbrenner and Blunsom2013]
 Nal Kalchbrenner
and Phil Blunsom. 2013. Two recurrent continuous
translation models. In
Proceedings of the ACL Con-
ference on Empirical Methods in Natural Language
Processing (EMNLP)
, pages 1700Œ1709.
[Koehn et al.2003]
 Philipp Koehn, Franz Josef Och,
and Daniel Marcu. 2003. Statistical phrase-based
translation. In
Proceedings of the 2003 Conference
of the North American Chapter of the Association
for Computational Linguistics on Human Language
Technology - Volume 1
, NAACL '03, pages 48Œ54.
[Koehn2005]
 P. Koehn. 2005. Europarl: A parallel cor-
pus for statistical machine translation. In
Machine
Translation Summit X
, pages 79Œ86, Phuket, Thai-
land.
[Krizhevsky et al.2012]
 Alex Krizhevsky, Ilya
Sutskever, and Geoffrey Hinton. 2012. Ima-
geNet classication with deep convolutional neural
networks. In
Advances in Neural Information
Processing Systems 25 (NIPS'2012)
.
[Marcu and Wong2002]
 Daniel Marcu and William
Wong. 2002. A phrase-based, joint probability
model for statistical machine translation. In
Pro-
ceedings of the ACL-02 Conference on Empirical
Methods in Natural Language Processing - Volume
10
, EMNLP '02, pages 133Œ139.
[Mikolov et al.2013]
 Tomas Mikolov, Ilya Sutskever,
Kai Chen, Greg Corrado, and Jeff Dean. 2013. Dis-
tributed representations of words and phrases and
their compositionality. In
Advances in Neural Infor-
mation Processing Systems 26
, pages 3111Œ3119.
[Moore and Lewis2010]
 Robert C. Moore and William
Lewis. 2010. Intelligent selection of language
model training data. In
Proceedings of the ACL
2010 Conference Short Papers
, ACLShort '10,
pages 220Œ224, Stroudsburg, PA, USA.
[Pascanu et al.2014]
 R. Pascanu, C. Gulcehre, K. Cho,
and Y. Bengio. 2014. How to construct deep recur-
rent neural networks. In
Proceedings of the Second
International Conference on Learning Representa-
tions (ICLR 2014)
, April.
[Saxe et al.2014]
 Andrew M. Saxe, James L. McClel-
land, and Surya Ganguli. 2014. Exact solutions
to the nonlinear dynamics of learning in deep lin-
ear neural networks. In
Proceedings of the Second
International Conference on Learning Representa-
tions (ICLR 2014)
, April.
[Schwenk et al.2006]
 Holger Schwenk, Marta R. Costa-
Juss
˚
a, and Jos
´
e A. R. Fonollosa. 2006. Continuous
space language models for the iwslt 2006 task. In
IWSLT
, pages 166Œ173.
[Schwenk2007]
 Holger Schwenk. 2007. Continuous
space language models.
Comput. Speech Lang.
,
21(3):492Œ518, July.
[Schwenk2012]
 Holger Schwenk. 2012. Continuous
space translation models for phrase-based statisti-
cal machine translation. In Martin Kay and Chris-
tian Boitet, editors,
Proceedings of the 24th Inter-
national Conference on Computational Linguistics
(COLIN)
, pages 1071Œ1080.
[Socher et al.2011]
 Richard Socher, Eric H. Huang, Jef-
frey Pennington, Andrew Y. Ng, and Christopher D.
Manning. 2011. Dynamic pooling and unfolding
recursive autoencoders for paraphrase detection. In
Advances in Neural Information Processing Systems
24
.
[Son et al.2012]
 Le Hai Son, Alexandre Allauzen, and
Franc¸ ois Yvon. 2012. Continuous space transla-
tion models with neural networks. In
Proceedings of
the 2012 Conference of the North American Chap-
ter of the Association for Computational Linguistics:
Human Language Technologies
, NAACL HLT '12,
pages 39Œ48, Stroudsburg, PA, USA.
[van der Maaten2013]
 Laurens van der Maaten. 2013.
Barnes-hut-sne. In
Proceedings of the First Inter-
national Conference on Learning Representations
(ICLR 2013)
, May.
[Vaswani et al.2013]
 Ashish Vaswani, Yinggong Zhao,
Victoria Fossum, and David Chiang. 2013. De-
coding with large-scale neural language models im-
proves translation.
Proceedings of the Conference
on Empirical Methods in Natural Language Pro-
cessing
, pages 1387Œ1392.
[Zeiler2012]
 Matthew D. Zeiler. 2012. ADADELTA:
an adaptive learning rate method. Technical report,
arXiv 1212.5701.
[Zou et al.2013]
 Will Y. Zou, Richard Socher,
Daniel M. Cer, and Christopher D. Manning.
2013. Bilingual word embed dings for phrase-based
machine translation. In
Proceedings of the ACL
Conference on Empirical Methods in Natural
Language Processing (EMNLP)
, pages 1393Œ1398.
A RNN EncoderŒDecoder
In this document, we describe in detail the architecture of the RNN EncoderŒDecoder used in the exper-
iments.
Let us denote an source phrase by
X
= (
x
1
;
x
2
; : : : ;
x
N
)
and a target phrase by
Y
=
(
y
1
;
y
2
; : : : ;
y
M
)
. Each phrase is a sequence of
K
-dimensional one-hot vectors, such that only one
element of the vector is
1
and all the others are
0
. The index of the active (
1
) element indicates the word
represented by the vector.
A.1 Encoder
Each word of the source phrase is embedded in a
500
-dimensional vector space:
e
(
x
i
)
2
R
500
.
e
(
x
)
is
used in Sec. 4.4 to visualize the words.
The hidden state of an encoder consists of
1000
hidden units, and each one of them at time
t
is
computed by
h
h
t
i
j
=
z
j
h
h
t

1
i
j
+ (1

z
j
)
~
h
h
t
i
j
;
where
~
h
h
t
i
j
= tanh

[
W
e
(
x
t
)]
j
+

U

r

h
h
t

1
i

j

;
z
j
=
˙

[
W
z
e
(
x
t
)]
j
+

U
z
h
h
t

1
i

j

;
r
j
=
˙

[
W
r
e
(
x
t
)]
j
+

U
r
h
h
t

1
i

j

:
˙
and

are a logistic sigmoid function and an element-wise multiplication, respectively. To make the
equations uncluttered, we omit biases. The initial hidden state
h
h
0
i
j
is xed to
0
.
Once the hidden state at the
N
step (the end of the source phrase) is computed, the representation of
the source phrase
c
is
c
= tanh

Vh
h
N
i

:
A.1.1 Decoder
The decoder starts by initializing the hidden state with
h
0
h
0
i
= tanh

V
0
c

;
where we will use

0
to distinguish parameters of the decoder from those of the encoder.
The hidden state at time
t
of the decoder is computed by
h
0
h
t
i
j
=
z
0
j
h
0
h
t

1
i
j
+ (1

z
0
j
)
~
h
0
h
t
i
j
;
where
~
h
0
h
t
i
j
= tanh


W
0
e
(
y
t

1
)

j
+
r
0
j

U
0
h
0
h
t

1
i
+
Cc


;
z
0
j
=
˙


W
0
z
e
(
y
t

1
)

j
+

U
0
z
h
0
h
t

1
i

j
+ [
C
z
c
]
j

;
r
0
j
=
˙


W
0
r
e
(
y
t

1
)

j
+

U
0
r
h
0
h
t

1
i

j
+ [
C
r
c
]
j

;
and
e
(
y
0
)
is an all-zero vector. Similarly to the case of the encoder,
e
(
y
)
is an embedding of a target
word.
Unlike the encoder which simply encodes the source phrase, the decoder is learned to generate a target
phrase. At each time
t
, the decoder computes the probability of generating
j
-th word by
p
(
y
t;j
= 1
j
y
t

1
; : : : ;
y
1
; X
) =
exp

g
j
s
h
t
i

P
K
j
0
=1
exp

g
j
0
s
h
t
i

;
where the
i
-element of
s
h
t
i
is
s
h
t
i
i
= max
n
s
0
h
t
i
2
i

1
; s
0
h
t
i
2
i
o
and
s
0
h
t
i
=
O
h
h
0
h
t
i
+
O
y
y
t

1
+
O
c
c
:
In short, the
s
h
t
i
i
is a so-called
maxout
unit.
For the computational efciency, instead of a single-matrix output weight
G
, we use a product of two
matrices such that
G
=
G
l
G
r
;
where
G
l
2
R
K

500
and
G
r
2
R
500

1000
.
B Word and Phrase Representations
Here, we show enlarged plots of the word and phrase representations in Figs. 4Œ5.
Figure 6: 2ŒD embedding of the learned word representation. The top left one shows the full embedding space, while the other three gures show the zoomed-in
view of specic regions (colorŒcoded).
Figure 7: 2ŒD embedding of the learned phrase representation. The top left one shows the full representation space (1000 randomly selected points), while the
other three gures show the zoomed-in view of specic regions (colorŒcoded).
